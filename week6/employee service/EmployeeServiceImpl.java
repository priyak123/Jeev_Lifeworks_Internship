package com.employee.employeeservice.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.employee.employeeservice.Repository.EmployeeRepository;
import com.employee.employeeservice.dto.EmployeeRequest;
import com.employee.employeeservice.model.Employee;
import com.employee.employeeservice.service.EmployeeService;

import java.util.List;

@Service // Marks this class as a service layer component for Spring to manage
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository; // Injects the EmployeeRepository for database operations

    /**
     * Creates a new Employee using the data from the request DTO.
     *
     * @param request Contains name, department, position, and salary
     * @return The saved Employee object
     */
    @Override
    public Employee createEmployee(EmployeeRequest request) {
        // Create Employee with ID = 0 (ID is typically auto-generated by the DB)
        Employee employee = new Employee(0, request.getName(), request.getDepartment(),
                request.getPosition(), request.getSalary());
        return employeeRepository.save(employee);
    }

    /**
     * Retrieves all Employee records from the repository.
     *
     * @return List of all employees
     */
    @Override
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    /**
     * Retrieves an Employee by ID or throws an exception if not found.
     *
     * @param id Employee ID to find
     * @return Employee object if found
     */
    @Override
    public Employee getEmployeeById(int id) {
        return employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found with id: " + id));
    }

    /**
     * Updates an existing employee by ID using the request data.
     *
     * @param id      Employee ID to update
     * @param request Updated data for the employee
     * @return The updated Employee object
     */
    @Override
    public Employee updateEmployee(int id, EmployeeRequest request) {
        // Construct a new Employee object with updated data
        Employee updated = new Employee(id, request.getName(), request.getDepartment(),
                request.getPosition(), request.getSalary());
        return employeeRepository.update(id, updated);
    }

    /**
     * Deletes an employee by ID after checking if they exist.
     *
     * @param id Employee ID to delete
     */
    @Override
    public void deleteEmployee(int id) {
        // Check if employee exists before deleting
        if (!employeeRepository.findById(id).isPresent()) {
            throw new RuntimeException("Employee not found with id: " + id);
        }
        employeeRepository.delete(id);
    }
}
